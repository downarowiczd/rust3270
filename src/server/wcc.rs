use bitflags::bitflags;

const WCC_TRANS: [u8; 64] = [
    0x40, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
    0x50, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
    0x60, 0x61, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
    0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F,
];

bitflags! {
    #[derive(Debug, Clone, Copy)]
    pub struct WCC: u8 {
        const UNUSED = 0x80;
        const RESET = 0x40;
        const PRINT_FLAG1 = 0x20;
        const PRINT_FLAG2 = 0x10;
        const START_PRINTER = 0x08;
        const SOUND_ALARM = 0x04;
        const KBD_RESTORE = 0x02;
        const RESET_MDT = 0x01;
    }
}

bitflags! {
    #[derive(Debug, Clone, Hash)]
    pub struct FieldAttribute: u8 {
        const HI_1 = 0x40;
        const HI_2 = 0x80;
        const PROTECTED = 0x20;
        const NUMERIC = 0x10;
        const NON_DISPLAY = 0x0C;
        const DISPLAY_SELECTOR_PEN_DETECTABLE = 0x04;
        const INTENSE_SELECTOR_PEN_DETECTABLE = 0x08;
        const MODIFIED = 0x01;
        const NONE = 0x00;
    }
}

pub fn make_ascii_translatable(val: u8) -> u8 {
    WCC_TRANS[(val & 0x3F) as usize]
}

impl WCC {
    pub fn to_ascii_compat(self) -> u8 {
        make_ascii_translatable(self.bits())
    }

    pub fn from_ascii_compat(value: u8) -> Self {
        Self::from_bits(value & 0x3F).unwrap()
    }
}
